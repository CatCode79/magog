extern crate calx;
extern crate content;
extern crate world;
extern crate render;

use calx::backend::{Key, Event, MouseButton};
use calx::{Kernel, V2, color};
use calx::backend::{WindowBuilder, Canvas, CanvasUtil, CanvasBuilder};
use content::TerrainType;
use content::Brush;
use world::{World, Location};
use world::query;
use render::{chart_to_screen, view_to_chart, cells_on_screen, render_terrain};
use render::{Angle, FLOOR_Z, BLOCK_Z};

/// State object for configuring world display.
struct DrawState {
    pub center: Location,
    pub cursor_loc: Option<Location>,
}

impl DrawState {
    pub fn new(center: Location) -> DrawState {
        DrawState {
            center: center,
            cursor_loc: None,
        }
    }

    pub fn cursor(mut self, cursor_loc: Location) -> DrawState {
        self.cursor_loc = Some(cursor_loc);
        self
    }

fn draw(&self,
              ctx: &mut Canvas,
              w: &World) {
    for pt in cells_on_screen() {
        let screen_pos = chart_to_screen(pt);
        let loc = self.center + pt;

        let k = Kernel::new(|loc| query::terrain(w, loc), loc);
        render_terrain(&k, |img, angle, fore, back| {
            let z = match angle {
                Angle::Up => FLOOR_Z,
                _ => BLOCK_Z,
            };
            ctx.draw_image(img, screen_pos, z, fore, back)
        });
    }

    if let Some(cursor_loc) = self.cursor_loc {
        self.draw_cursor(ctx, cursor_loc)
    }
}
    fn draw_cursor(&self, ctx: &mut Canvas, cursor_loc: Location) {
    if let Some(pt) = self.center.v2_at(cursor_loc) {
        // Draw cursor
        let screen_pos = chart_to_screen(pt);
        ctx.draw_image(Brush::CursorBottom.get(0),
                       screen_pos,
                       FLOOR_Z,
                       color::RED,
                       color::BLACK);
        ctx.draw_image(Brush::CursorTop.get(0),
                       screen_pos,
                       BLOCK_Z,
                       color::RED,
                       color::BLACK);

    }
    }
}

pub fn main() {
    let window = WindowBuilder::new()
                     .set_title("Mapedit")
                     .build();

    let mut builder = CanvasBuilder::new();
    content::Brush::init(&mut builder);
    let mut ctx = builder.build(window);

    let mut state = EditState::new();
    let mut cursor_pos = V2(0, 0);

    loop {
        let cursor_loc = state.center + view_to_chart(cursor_pos);
        draw_world(&state.world, &mut ctx, state.center, cursor_loc);

        for event in ctx.events().into_iter() {
            match event {
                Event::Quit => return,
                Event::KeyPress(Key::Escape) => return,

                Event::KeyPress(Key::W) => {
                    state.center = state.center + V2(-1, -1)
                }
                Event::KeyPress(Key::S) => {
                    state.center = state.center + V2(1, 1)
                }
                Event::KeyPress(Key::A) => {
                    state.center = state.center + V2(-1, 1)
                }
                Event::KeyPress(Key::D) => {
                    state.center = state.center + V2(1, -1)
                }

                Event::MouseMove(V2(x, y)) => {
                    state.paint(cursor_loc);

                    let size = ctx.window.size();
                    cursor_pos = V2(x as i32 - (size.0 / 2) as i32,
                                    y as i32 - (size.1 / 2) as i32);
                }

                Event::MousePress(MouseButton::Left) => {
                    state.paint_state = Some(PaintState::Draw);
                    state.paint(cursor_loc);
                }

                Event::MousePress(MouseButton::Right) => {
                    state.paint_state = Some(PaintState::Clear);
                    state.paint(cursor_loc);
                }

                Event::MouseRelease(_) => {
                    state.paint_state = None;
                }

                _ => (),
            }
        }
        ctx.end_frame();
    }
}

enum PaintState {
    Draw,
    Clear,
}

pub struct EditState {
    world: World,
    center: Location,
    brush: TerrainType,
    paint_state: Option<PaintState>,
}

impl EditState {
    pub fn new() -> EditState {
        EditState {
            world: World::new(None),
            center: Location::new(0, 0),
            brush: TerrainType::Rock,
            paint_state: None,
        }
    }

    pub fn paint(&mut self, cursor_loc: Location) {
        match self.paint_state {
            Some(PaintState::Draw) => {
                self.world.terrain.set(cursor_loc, self.brush)
            }
            Some(PaintState::Clear) => self.world.terrain.clear(cursor_loc),
            None => {}
        }
    }
}
