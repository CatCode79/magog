use cfg_if::cfg_if;
use winit::event::VirtualKeyCode;

/// Identifiers for keyboard keys.
///
/// After USB HID Usage Tables document at http://www.usb.org/developers/hidpage/Hut1_12v2.pdf
#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub enum Keycode {
    A = 4,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    N,
    M,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    Num1 = 30,
    Num2,
    Num3,
    Num4,
    Num5,
    Num6,
    Num7,
    Num8,
    Num9,
    Num0,
    Enter = 40,
    Escape,
    Backspace,
    Tab,
    Space,
    Minus,
    Equals,
    LeftBracket,
    RightBracket,
    Backslash,
    NonUsHash = 50,
    Semicolon,
    Apostrophe,
    Grave,
    Comma,
    Period,
    Slash,
    CapsLock,
    F1 = 58,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    PrintScreen = 70,
    ScrollLock,
    Pause,
    Insert,
    Home,
    PageUp,
    Delete,
    End,
    PageDown,
    Right,
    Left,
    Down,
    Up,
    NumLock = 83,
    PadDivide,
    PadMultiply,
    PadMinus,
    PadPlus,
    PadEnter,
    Pad1 = 89,
    Pad2,
    Pad3,
    Pad4,
    Pad5,
    Pad6,
    Pad7,
    Pad8,
    Pad9,
    Pad0,
    PadDecimal,
    NonUsBackslash = 100,
    PadEquals = 103,
    Menu = 118,
    Mute = 127,
    VolumeUp,
    VolumeDown,
    SysReq = 154,
    LeftControl = 224,
    LeftShift,
    LeftAlt,
    LeftGui,
    RightControl,
    RightShift,
    RightAlt,
    RightGui,
}

use crate::Keycode::*;

cfg_if! {
    if #[cfg(target_os = "windows")] {
        static MAP: [Option<Keycode>; 94] = [
            None,
            Some(Escape),
            Some(Num1),
            Some(Num2),
            Some(Num3),
            Some(Num4),
            Some(Num5),
            Some(Num6),
            Some(Num7),
            Some(Num8),
            Some(Num9),
            Some(Num0),
            Some(Minus),
            Some(Equals),
            Some(Backspace),
            Some(Tab),
            Some(Q),
            Some(W),
            Some(E),
            Some(R),
            Some(T),
            Some(Y),
            Some(U),
            Some(I),
            Some(O),
            Some(P),
            Some(LeftBracket),
            Some(RightBracket),
            Some(Enter),
            Some(LeftControl),
            Some(A),
            Some(S),
            Some(D),
            Some(F),
            Some(G),
            Some(H),
            Some(J),
            Some(K),
            Some(L),
            Some(Semicolon),
            Some(Apostrophe),
            Some(Grave),
            Some(LeftShift),
            Some(Backslash),
            Some(Z),
            Some(X),
            Some(C),
            Some(V),
            Some(B),
            Some(N),
            Some(M),
            Some(Comma),
            Some(Period),
            Some(Slash),
            Some(RightShift),
            Some(PadMultiply), // Also PrintScreen
            Some(LeftAlt),
            Some(Space),
            Some(CapsLock),
            Some(F1),
            Some(F2),
            Some(F3),
            Some(F4),
            Some(F5),
            Some(F6),
            Some(F7),
            Some(F8),
            Some(F9),
            Some(F10),
            Some(NumLock),
            Some(ScrollLock),
            Some(Home),   // Also Pad7
            Some(Up),     // Also Pad8
            Some(PageUp), // Also Pad9
            Some(PadMinus),
            Some(Left), // Also Pad4
            Some(Pad5),
            Some(Right), // Also Pad6
            Some(PadPlus),
            Some(End),      // Also Pad1
            Some(Down),     // Also Pad2
            Some(PageDown), // Also Pad3
            Some(Insert),   // Also Pad0
            Some(Delete),   // Also PadDecimal
            None,
            None,
            Some(NonUsBackslash),
            Some(F11),
            Some(F12),
            Some(Pause),
            None,
            Some(LeftGui),
            Some(RightGui),
            Some(Menu),
        ];
    } else if #[cfg(target_os = "macos")] {
        static MAP: [Option<Keycode>; 127] = [
            Some(A),
            Some(S),
            Some(D),
            Some(F),
            Some(H),
            Some(G),
            Some(Z),
            Some(X),
            Some(C),
            Some(V),
            Some(NonUsBackslash),
            Some(B),
            Some(Q),
            Some(W),
            Some(E),
            Some(R),
            Some(Y),
            Some(T),
            Some(Num1),
            Some(Num2),
            Some(Num3),
            Some(Num4),
            Some(Num6),
            Some(Num5),
            Some(Equals),
            Some(Num9),
            Some(Num7),
            Some(Minus),
            Some(Num8),
            Some(Num0),
            Some(RightBracket),
            Some(O),
            Some(U),
            Some(LeftBracket),
            Some(I),
            Some(P),
            Some(Enter),
            Some(L),
            Some(J),
            Some(Apostrophe),
            Some(K),
            Some(Semicolon),
            Some(Backslash),
            Some(Comma),
            Some(Slash),
            Some(N),
            Some(M),
            Some(Period),
            Some(Tab),
            Some(Space),
            Some(Grave),
            Some(Backspace),
            Some(PadEnter),
            Some(Escape),
            Some(RightGui),
            Some(LeftGui),
            Some(LeftShift),
            Some(CapsLock),
            Some(LeftAlt),
            Some(LeftControl),
            Some(RightShift),
            Some(RightAlt),
            Some(RightControl),
            None,
            None,
            Some(PadDecimal),
            None,
            Some(PadMultiply),
            None,
            Some(PadPlus),
            None,
            Some(NumLock),
            Some(VolumeUp),
            Some(VolumeDown),
            Some(Mute),
            Some(PadDivide),
            Some(PadEnter),
            None,
            Some(PadMinus),
            None,
            None,
            Some(PadEquals),
            Some(Pad0),
            Some(Pad1),
            Some(Pad2),
            Some(Pad3),
            Some(Pad4),
            Some(Pad5),
            Some(Pad6),
            Some(Pad7),
            None,
            Some(Pad8),
            Some(Pad9),
            None,
            None,
            None,
            Some(F5),
            Some(F6),
            Some(F7),
            Some(F3),
            Some(F8),
            Some(F9),
            None,
            Some(F11),
            None,
            None, // F13,
            Some(Pause),
            Some(PrintScreen),
            None,
            Some(F10),
            None,
            Some(F12),
            None,
            Some(ScrollLock),
            Some(Insert),
            Some(Home),
            Some(PageUp),
            Some(Delete),
            Some(F4),
            Some(End),
            Some(F2),
            Some(PageDown),
            Some(F1),
            Some(Left),
            Some(Right),
            Some(Down),
            Some(Up),
        ];
    } else {
        static MAP: [Option<Keycode>; 136] = [
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(Escape),
            Some(Num1),
            Some(Num2),
            Some(Num3),
            Some(Num4),
            Some(Num5),
            Some(Num6),
            Some(Num7),
            Some(Num8),
            Some(Num9),
            Some(Num0),
            Some(Minus),
            Some(Equals),
            Some(Backspace),
            Some(Tab),
            Some(Q),
            Some(W),
            Some(E),
            Some(R),
            Some(T),
            Some(Y),
            Some(U),
            Some(I),
            Some(O),
            Some(P),
            Some(LeftBracket),
            Some(RightBracket),
            Some(Enter),
            Some(LeftControl),
            Some(A),
            Some(S),
            Some(D),
            Some(F),
            Some(G),
            Some(H),
            Some(J),
            Some(K),
            Some(L),
            Some(Semicolon),
            Some(Apostrophe),
            Some(Grave),
            Some(LeftShift),
            Some(Backslash),
            Some(Z),
            Some(X),
            Some(C),
            Some(V),
            Some(B),
            Some(N),
            Some(M),
            Some(Comma),
            Some(Period),
            Some(Slash),
            Some(RightShift),
            Some(PadMultiply),
            Some(LeftAlt),
            Some(Space),
            Some(CapsLock),
            Some(F1),
            Some(F2),
            Some(F3),
            Some(F4),
            Some(F5),
            Some(F6),
            Some(F7),
            Some(F8),
            Some(F9),
            Some(F10),
            Some(NumLock),
            Some(ScrollLock),
            Some(Pad7),
            Some(Pad8),
            Some(Pad9),
            Some(PadMinus),
            Some(Pad4),
            Some(Pad5),
            Some(Pad6),
            Some(PadPlus),
            Some(Pad1),
            Some(Pad2),
            Some(Pad3),
            Some(Pad0),
            Some(PadDecimal),
            None,
            None,
            Some(NonUsBackslash),
            Some(F11),
            Some(F12),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(PadEnter),
            Some(RightControl),
            Some(PadDivide),
            Some(SysReq),
            Some(RightAlt),
            None,
            Some(Home),
            Some(Up),
            Some(PageUp),
            Some(Left),
            Some(Right),
            Some(End),
            Some(Down),
            Some(PageDown),
            Some(Insert),
            Some(Delete),
            None,
            Some(Mute),
            Some(VolumeDown),
            Some(VolumeUp),
            None,
            None,
            None,
            Some(Pause),
            None,
            None,
            None,
            None,
            None,
            Some(LeftGui),
            Some(RightGui),
            Some(Menu),
        ];
    }
}

impl Keycode {
    /// Try to convert a hardware scancode from the current platform to a Keycode enum value.
    pub fn from_scancode(hardware_scancode: u32) -> Option<Keycode> {
        if (hardware_scancode as usize) < MAP.len() {
            MAP[hardware_scancode as usize]
        } else {
            None
        }
    }

    pub fn try_from(vk: VirtualKeyCode) -> Result<Self, ()> {
        use crate::Keycode::*;
        match vk {
            VirtualKeyCode::Key1 => Ok(Num1),
            VirtualKeyCode::Key2 => Ok(Num2),
            VirtualKeyCode::Key3 => Ok(Num3),
            VirtualKeyCode::Key4 => Ok(Num4),
            VirtualKeyCode::Key5 => Ok(Num5),
            VirtualKeyCode::Key6 => Ok(Num6),
            VirtualKeyCode::Key7 => Ok(Num7),
            VirtualKeyCode::Key8 => Ok(Num8),
            VirtualKeyCode::Key9 => Ok(Num9),
            VirtualKeyCode::Key0 => Ok(Num0),
            VirtualKeyCode::A => Ok(A),
            VirtualKeyCode::B => Ok(B),
            VirtualKeyCode::C => Ok(C),
            VirtualKeyCode::D => Ok(D),
            VirtualKeyCode::E => Ok(E),
            VirtualKeyCode::F => Ok(F),
            VirtualKeyCode::G => Ok(G),
            VirtualKeyCode::H => Ok(H),
            VirtualKeyCode::I => Ok(I),
            VirtualKeyCode::J => Ok(J),
            VirtualKeyCode::K => Ok(K),
            VirtualKeyCode::L => Ok(L),
            VirtualKeyCode::M => Ok(M),
            VirtualKeyCode::N => Ok(N),
            VirtualKeyCode::O => Ok(O),
            VirtualKeyCode::P => Ok(P),
            VirtualKeyCode::Q => Ok(Q),
            VirtualKeyCode::R => Ok(R),
            VirtualKeyCode::S => Ok(S),
            VirtualKeyCode::T => Ok(T),
            VirtualKeyCode::U => Ok(U),
            VirtualKeyCode::V => Ok(V),
            VirtualKeyCode::W => Ok(W),
            VirtualKeyCode::X => Ok(X),
            VirtualKeyCode::Y => Ok(Y),
            VirtualKeyCode::Z => Ok(Z),
            VirtualKeyCode::Escape => Ok(Escape),
            VirtualKeyCode::F1 => Ok(F1),
            VirtualKeyCode::F2 => Ok(F2),
            VirtualKeyCode::F3 => Ok(F3),
            VirtualKeyCode::F4 => Ok(F4),
            VirtualKeyCode::F5 => Ok(F5),
            VirtualKeyCode::F6 => Ok(F6),
            VirtualKeyCode::F7 => Ok(F7),
            VirtualKeyCode::F8 => Ok(F8),
            VirtualKeyCode::F9 => Ok(F9),
            VirtualKeyCode::F10 => Ok(F10),
            VirtualKeyCode::F11 => Ok(F11),
            VirtualKeyCode::F12 => Ok(F12),
            VirtualKeyCode::Snapshot => Ok(PrintScreen),
            VirtualKeyCode::Scroll => Ok(ScrollLock),
            VirtualKeyCode::Pause => Ok(Pause),
            VirtualKeyCode::Insert => Ok(Insert),
            VirtualKeyCode::Home => Ok(Home),
            VirtualKeyCode::Delete => Ok(Delete),
            VirtualKeyCode::End => Ok(End),
            VirtualKeyCode::PageDown => Ok(PageDown),
            VirtualKeyCode::PageUp => Ok(PageUp),
            VirtualKeyCode::Left => Ok(Left),
            VirtualKeyCode::Up => Ok(Up),
            VirtualKeyCode::Right => Ok(Right),
            VirtualKeyCode::Down => Ok(Down),
            VirtualKeyCode::Return => Ok(Enter),
            VirtualKeyCode::Space => Ok(Space),
            VirtualKeyCode::Numlock => Ok(NumLock),
            VirtualKeyCode::Numpad0 => Ok(Pad0),
            VirtualKeyCode::Numpad1 => Ok(Pad1),
            VirtualKeyCode::Numpad2 => Ok(Pad2),
            VirtualKeyCode::Numpad3 => Ok(Pad3),
            VirtualKeyCode::Numpad4 => Ok(Pad4),
            VirtualKeyCode::Numpad5 => Ok(Pad5),
            VirtualKeyCode::Numpad6 => Ok(Pad6),
            VirtualKeyCode::Numpad7 => Ok(Pad7),
            VirtualKeyCode::Numpad8 => Ok(Pad8),
            VirtualKeyCode::Numpad9 => Ok(Pad9),
            VirtualKeyCode::NumpadAdd => Ok(PadPlus),
            VirtualKeyCode::Apostrophe => Ok(Apostrophe),
            VirtualKeyCode::Backslash => Ok(Backslash),
            VirtualKeyCode::Comma => Ok(Comma),
            VirtualKeyCode::NumpadDecimal => Ok(PadDecimal),
            VirtualKeyCode::NumpadDivide => Ok(PadDivide),
            VirtualKeyCode::Equals => Ok(PadEquals),
            VirtualKeyCode::Grave => Ok(Grave),
            VirtualKeyCode::LAlt => Ok(LeftAlt),
            VirtualKeyCode::LBracket => Ok(LeftBracket),
            VirtualKeyCode::LControl => Ok(LeftControl),
            VirtualKeyCode::LShift => Ok(LeftShift),
            VirtualKeyCode::LWin => Ok(LeftGui),
            VirtualKeyCode::Minus => Ok(Minus),
            VirtualKeyCode::NumpadMultiply => Ok(PadMultiply),
            VirtualKeyCode::NumpadComma => Ok(PadDecimal),
            VirtualKeyCode::NumpadEnter => Ok(PadEnter),
            VirtualKeyCode::NumpadEquals => Ok(PadEquals),
            VirtualKeyCode::Period => Ok(Period),
            VirtualKeyCode::RAlt => Ok(RightAlt),
            VirtualKeyCode::RBracket => Ok(RightBracket),
            VirtualKeyCode::RControl => Ok(RightControl),
            VirtualKeyCode::RShift => Ok(RightShift),
            VirtualKeyCode::RWin => Ok(RightGui),
            VirtualKeyCode::Semicolon => Ok(Semicolon),
            VirtualKeyCode::Slash => Ok(Slash),
            VirtualKeyCode::NumpadSubtract => Ok(PadMinus),
            VirtualKeyCode::Sysrq => Ok(SysReq),
            VirtualKeyCode::Tab => Ok(Tab),
            _ => Err(()),
        }
    }
}
